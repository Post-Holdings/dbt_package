name: 'ent_dbt_package'
version: '1.4.0'

require-dbt-version: [">=1.0.0", "<2.0.0"]

config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'default'

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]
target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"
  - "dbt_modules"
log-path: "logs"

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:
  ent_dbt_package:
    # Applies to all files under models/example/
    phi:
      stg_dim:
        +schema: "{{env_var('DBT_STG_SCHEMA')}}"
        +materialized: "{{env_var('DBT_MAT_VIEW')}}"
        +transient: false
      src:
        +schema: "{{env_var('DBT_SRC_SCHEMA')}}"
        +materialized: "{{env_var('DBT_MAT_VIEW')}}"
        +transient: false
      int_dim:
        +schema: "{{env_var('DBT_DIM_SCHEMA')}}"
        +materialized: "{{env_var('DBT_MAT_VIEW')}}"
        +transient: false
      int_fct:
        +schema: "{{env_var('DBT_FACT_SCHEMA')}}"
        +materialized: "{{env_var('DBT_MAT_VIEW')}}"
        +transient: false
      dim:
        +schema: "{{env_var('DBT_DIM_SCHEMA')}}"
        +materialized: "{{env_var('DBT_MAT_TABLE')}}"
        +transient: false
      dim_conversion:
        +schema: "{{env_var('DBT_DIM_SCHEMA')}}"
        +materialized: "{{env_var('DBT_MAT_TABLE')}}"
        +transient: false
      fct:
        +schema: "{{env_var('DBT_FACT_SCHEMA')}}"
        +materialized: "{{env_var('DBT_MAT_TABLE')}}"
        +transient: false
      dbt_artifacts:
        +schema: "{{env_var('DBT_ARTIFACTS_SCHEMA')}}"
        +materialized: "{{env_var('DBT_MAT_TABLE')}}"
        +transient: false
  dbt_artifacts:
    +database: "{{env_var('DBT_TGT_DB')}}" # optional, default is your target database
    +schema: "{{env_var('DBT_ARTIFACTS_SCHEMA')}}" # optional, default is your target schema
    staging:
      +database: "{{env_var('DBT_TGT_DB')}}" # optional, default is your target database
      +schema: "{{env_var('DBT_ARTIFACTS_SCHEMA')}}" # optional, default is your target schema
    sources:
      +database: "{{env_var('DBT_TGT_DB')}}" # optional, default is your target database
      +schema: "{{env_var('DBT_ARTIFACTS_SCHEMA')}}" # optional, default is your target schema

        
# configuration for tests directory
tests:
  +severity: warn  # all tests
  +store_failures: "{{ (env_var('DBT_STORE_TEST_RESULTS') == 'YES') | as_bool }}"
  +schema: "{{env_var('DBT_TEST_SCHEMA')}}"


query-comment:
  comment: "{{ query_comment(node) }}"
  append: true


vars:
  dbt_artifacts_create_schema: false
  #+dbt_artifacts_database: "{{env_var('DBT_TGT_DB')}}"
  #dbt_artifacts_schema: 'DBT_ARTIFACTS'
  #+dbt_artifacts_schema: "{{env_var('DBT_ARTIFACTS_SCHEMA') | as_text}}"
